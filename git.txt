修改历史：git log
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
		  git log --graph
		  
版本回退：git reset --hard commit_id\HEAD^\HEAD^^\HEAD~100
命令历史：git reflog(用来查找commit_id)

丢弃工作区的修改：git checkout -- file     	让这个文件回到最近一次git commit或git add时的状态
丢弃暂存区的修改：git reset HEAD file		把暂存区的修改回退到工作区

删除：git rm file
git commit -m "remove test.txt"

本地Git仓库和GitHub仓库之间的传输是通过SSH加密

create a new repository on the command line
echo "# tutorial" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:liecn/tutorial.git
git push -u origin master

push an existing repository from the command line
git remote add origin git@github.com:liecn/tutorial.git
git push -u origin master

关联一个远程库：git remote add origin git@server-name:path/repo-name.git
				eg:git remote add origin git@github.com:michaelliao/learngit.git
第一次推送master分支:git push -u origin master(-u 把本地的master分支和远程的master分支关联)
本地提交:git push origin master

克隆远程仓库至本地：git clone git@github.com:michaelliao/gitskills.git     ssh协议
							  https://github.com/michaelliao/gitskills.git
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

查看分支：git branch
创建+切换分支：git checkout -b <name>
创建分支：git branch <name>
切换分支：git checkout <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

合并dev分支，--no-ff参数，表示禁用Fast forward：git merge --no-ff -m "merge with no-ff" dev

保存现场：git stash
git stash list
git stash apply stash@{0}   or    git stash pop
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了。

强制删除分支：git branch -D <name>

查看远程库信息：git remote -v

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

命令git tag <name> <commit id>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
命令git tag		可以查看所有标签
git tag -d v0.1 	删除标签
git show <tagname>	可以看到说明文字
命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签

在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。

git remote -v		查看远程库信息：
git remote rm origin 	删除已有的GitHub远程库
git remote add origin git@gitee.com:liaoxuefeng/learngit.git
git remote add github git@github.com:michaelliao/learngit.git
git push github master
git push gitee master

git config --global color.ui true
忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig
每个仓库的Git配置文件都放在.git/config文件中